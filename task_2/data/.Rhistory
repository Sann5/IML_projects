labs(title = "Paper",
subtitle = waiver(),
caption = waiver(),
tag = waiver()) +
theme(plot.title = element_text(hjust = 0.5)),
ssc.plot.tsne(sce,
columns = c("rep_cluster"),
reduced.name = "pca.tsne",
par.legend = "",
theme.use = theme_minimal,
plotDensity = TRUE) +
labs(title = "Reproduction",
subtitle = waiver(),
caption = waiver(),
tag = waiver()) +
theme(plot.title = element_text(hjust = 0.5)),
nrow = 2)
sI <- sessionInfo()
print(sI, RNG = TRUE, locale = FALSE)
saveRDS(sce, file = "~/Downloads/final_sce.rds"
)
library(vroom)
vroom(file = "/Users/santiago/ETH/2021_S/IML/projects/task0_sl19d1/train.csv")
vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_1a/data/train.csv")
library(vroom)
vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_1a/data/train.csv")
vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_1a/data/train.csv")
toy = vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_1a/data/train.csv")
library(tidyverse)
toy %>% distinct(x2)
toy2 = toy %>% select(-y)
qr(toy2).rank
qr(toy2)$rank
X <- c(1, 1, 4.5, 4.5)
Y <- c(1, 2.5, 2.5, 4)
as.data.frame(Y, X)
as.data.frame(c(Y, X))
as.data.frame(Y = Y, X = X)
data.frame(Y = Y, X = X)
fit <- lm(Y ~ X, data = data)
data <- data.frame(Y = Y, X = X)
fit <- lm(Y ~ X, data = data)
summary(fit)
plot(fi)
plot(fit)
plot(fit)
?plot
fit$coefficients
fit$coefficients[1]
plot(Y, X)
plot(X, Y)
abline(a = fit$coefficients[1],
b = fit$coefficients[2])
fit <- lm(Y ~ X, data = data)
fit2 <- lm(X ~ Y, data = data)
par(mfrow=c(1,2))
plot(X, Y)
abline(a = fit$coefficients[1],
b = fit$coefficients[2])
abline(a = fit2$coefficients[1],
b = fit2$coefficients[2])
plot(X, Y)
plot(X, Y)
abline(a = fit$coefficients[1],
b = fit$coefficients[2])
abline(a = fit2$coefficients[1],
b = fit2$coefficients[2])
fit2$coefficients
?plot
plot(Y, X)
abline(a = fit$coefficients[1],
b = fit$coefficients[2])
abline(a = fit2$coefficients[1],
b = fit2$coefficients[2])
par(mfrow=c(1,2))
plot(X, Y)
abline(a = fit$coefficients[1],
b = fit$coefficients[2])
plot(Y, X)
abline(a = fit2$coefficients[1],
b = fit2$coefficients[2])
### Give the approximate equation for the least squares line.
# The line intercepts around 680 and has a slope of
slope = (800 - 700)/(6 - 0)
### Give the approximate equation for the least squares line.
# The line intercepts around 680 and has a slope of
slope = (800 - 700)/(6 - 0)
### Estimate the income of a farm with 15 cows and of a farm with 100 cows? How meaningful are these estimates?
income1 = slope*15 + 680
income2 = slope*100 + 680
## simple linear regression
set.seed(21)                   # initializes the random number generator
x   <- seq(1,40,1)             # generates equidistant x-values
y   <- 2*x+1+5*rnorm(length(x))# y-values=linear function(x) + error
reg <- lm(y~x)                 # fit of the linear regression
summary(reg)                   # output of selected results
plot(x,y)                      # scatter plot
abline(reg)                    # draws regression line
plot(x,y)                      # scatter plot
abline(reg)                    # draws regression line
abline(reg)                    # draws regression line
plot(x,y)                      # scatter plot
abline(reg)
### 1a Fit 100 do the same as above 100 times and store the results in a vector
results <- c()
for (i in 1:100) {
y <- 2*x+1+5*rnorm(length(x))
reg <- lm(y~x)
results <- c(results, reg$coefficients[2])
}
results
reg$coefficients[2]
reg$coefficients[[2]]
for (i in 1:100) {
y <- 2*x+1+5*rnorm(length(x))
reg <- lm(y~x)
results <- c(results, reg$coefficients[[2]])
}
results
reg$coefficients[[2]]
### 1a Fit 100 do the same as above 100 times and store the results in a vector
results <- c()
for (i in 1:100) {
y <- 2*x+1+5*rnorm(length(x))
reg <- lm(y~x)
results <- c(results, reg$coefficients[[2]])
}
results
### Draw a histogram of the 100 estimated slopes and add the normal density of the theoretically true distribution of the slopes to the histogram.
hist(results)
### Draw a histogram of the 100 estimated slopes and add the normal density of the theoretically true distribution of the slopes to the histogram.
hist(results, freq = FALSE)
lines(seq(1.8,2.3,by=0.01),dnorm(seq(1.8,2.3,by=0.01),mean=mean(results),sd=sd(results)))
hist(results, freq = FALSE)
lines(seq(1.8,2.3,by=0.01),dnorm(seq(1.8,2.3,by=0.01),mean=mean(results),sd=sd(results)))
results <- c()
for (i in 1:100) {
y <- 2*x+1+5*(1-rchisq(length(x), df=1))/sqrt(2)
reg <- lm(y~x)
results <- c(results, reg$coefficients[[2]])
}
hist(results, freq = FALSE)
lines(seq(1.8,2.3,by=0.01),dnorm(seq(1.8,2.3,by=0.01),mean=mean(results),sd=sd(results)))
### explore the error distribution
hist(5*(1-rchisq(40, df=1))/sqrt(2))
hist(results, freq = FALSE)
lines(seq(1.8,2.3,by=0.01),dnorm(seq(1.8,2.3,by=0.01),mean=mean(results),sd=sd(results)))
airline
airline <- scan("http://stat.ethz.ch/Teaching/Datasets/airline.dat")
airline
AirPassengers
AirPassengers
airline <- scan("http://stat.ethz.ch/Teaching/Datasets/airline.dat")
airline
t <- ts(airline,start=c(1949,1),frequency=12)
plot(c(time(t)), airline, xlab="Time",type="l")
t
time(t)
airline
plot(t, log(airline), type="l", main="Logarithmized data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2, 1))
plot(c(time(t)), airline, xlab="Time",type="l", main="Original data")
plot(c(time(t)), airline, xlab="Time",type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2, 1))
plot(c(time(t)), airline, xlab="Time",type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
plot(c(time(t)), airline, xlab="Time",type="l", main="Original data")
par(mfrow=c(2, 1))
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(1, 2))
plot(c(time(t)), airline, xlab="Time",type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2,1))
plot(c(time(t)), airline, xlab="Time",type="l", main="Original data")
par(mfrow=c(2,1))
plot(c(time(t)), airline, xlab="Time",type="l", main="Original data")
plot(c(time(t)), airline,type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2,1))
plot(c(time(t)), airline,type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2,1))
plot(c(time(t)), airline,type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2,1))
plot(c(time(t)), airline,type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2,1))
plot(c(time(t)), airline,type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2,1))
plot(c(time(t)), airline,type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
par(mfrow=c(2,1))
plot(c(time(t)), airline,type="l", main="Original data")
plot(c(time(t)), log(airline), type="l", main="Logarithmized data")
library(tidyverse)
votes <- c(2, 5, 8, 9, 10, 11, 13, 16, 19, 21, 2, 5, 8, 9, 10, 11, 13, 14, 16,
20, 2, 4, 6, 7, 9, 10, 12, 13, 16, 19, 19, 16, 14, 13, 12, 10, 3, 8, 7, 0)
hist(votes)
hist(votes, breaks = 1)
hist(votes, breaks = 20)
votes %>% as.tibble()
votes %>% as.tibble()
votes %>% as.tibble() %>% group_by(value) %>% summarise(count = n())
votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange()
?arrange
votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange(count)
votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange(desc(count))
votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>% pull(value)
votes <- c(2, 5, 8, 9, 10, 11, 13, 16, 19, 21, 2, 5, 8, 9, 10, 11, 13, 14, 16,
20, 2, 4, 6, 7, 9, 10, 12, 13, 16, 19, 19, 16, 14, 13, 12, 10, 3, 8, 7, 0,
2, 11, 15, 10, 20, 1, 18, 5, 4, 9)
votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>% pull(value)
votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange(desc(count))
votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange(desc(count))
votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange(desc(count))
score = votes %>%
as.tibble() %>%
group_by(value) %>%
summarise(count = n()) %>%
arrange(desc(count))
View(score)
View(score)
library(vroom)
library(tidyverse)
vroom(file = "~/ETH/2021_S/IML/IML_projects/task_1a/data/train.csv")
vroom(file = "~/ETH/2021_S/IML/IML_projects/task_1a/data/train.csv")
data <- vroom(file = "~/ETH/2021_S/IML/IML_projects/task_1a/data/train.csv")
pairs(data)
par(mar=c(1,1,1,1))
pairs(data)
?pairs
data %>% distinct(x4)
500/300
0.455/0.0022
207/762
0.6*762
(1-(1/2))/(0.2)
(1-(1/2))/(0.9)
(1-(1/2))/(0.7)
(1-(1/2))/(0.6)
(1-(1/2))/(0.)
(1-(1/2))/(0.99)
1 - 1/20
0.95*0.8
0.95/0.8
View(data)
27 %% 5
2 %% 5
floor(27/5) %% 5
32 %% 5
floor(2/5) %% 5
27 %% 5
floor(32/5) %% 5
solve(x %% 5 = 2)
floor(7/5) %% 5
32 %% 5
97*8**2 + 98*8**1 + 99*8**0
99*8**2 + 98*8**1 + 97*8**0
7091 %% 7
7217 %% 7
7 %% 11
11 %% 11
28 %% 11
21 %% 11
2 %% 11
20 %% 11
23 %% 11
6 %% 11
7 %% 11
7 %% 5
6 %% 9
7 %% 9
28 %% 9
28 %% 11
2**15
2**15/1021
2^15/1021
1021^0 %% 2^15
1021^1 %% 2^15
1021^2 %% 2^15
1021^3 %% 2^15
1021^4 %% 2^15
1021^5 %% 2^15
1021^6 %% 2^15
1021^7 %% 2^15
1021^8 %% 2^15
1021^9 %% 2^15
1021^10 %% 2^15
1021^11 %% 2^15
1021^12 %% 2^15
1021^13 %% 2^15
1021^14 %% 2^15
1021^115 %% 2^15
1021^15 %% 2^15
((1021^4 %% 2^15)*(1021^4 %% 2^15))%%2^15
library(vroom)
vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv")
toy <- vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv")
View(toy)
sample_frac(toy, 1L)
livrary(tidyverse)
library(tidyverse)
sample_frac(toy, 1L)
toy %>% colnames()
toy %>% distinct(pid) %>% n()
toy %>% distinct(pid)
?vroom
vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv",
col_types = col_double())
vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv",
col_types = c(d))
vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv",
col_types = c(col_double()))
### Load data ###
data <- vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv",
col_types = c(col_double()))
### Make data samller to test idea ###
data %>% filter(pid %in% 1:100)
732/12
### Make data samller to test idea ###
data <- data %>% filter(pid %in% 1:100)
?pivot_longer
### Make data into long format ###
data %>% pivot_longer(cols = -c("pid", "Time", "Age"),
names_to = "features",
values_to = values)
### Make data into long format ###
data %>% pivot_longer(cols = -c("pid", "Time", "Age"),
names_to = "features",
values_to = "values")
data
### Make data into long format ###
data <- data %>% pivot_longer(cols = -c("pid", "Time", "Age"),
names_to = "features",
values_to = "values")
### Load data ###
data <- vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv",
col_types = c(col_double()))
### Make data samller to test idea ###
data <- data %>% filter(pid %in% 1:100)
### Make data into long format ###
data <- data %>% pivot_longer(cols = -c("pid", "Time", "Age"),
names_to = "feature",
values_to = "values")
data %>% filter(!is.na(values))
### Get medians ###
data %>%
filter(!is.na(values)) %>%
group_by(feature) %>%
summarise(medain = median(values))
data %>%
filter(!is.na(values)) %>%
group_by(feature) %>%
summarise(median = median(values))
### Get medians ###
medains <- data %>%
filter(!is.na(values)) %>%
group_by(feature) %>%
summarise(median = median(values))
?any
?group_by
### We summerize the data with our new function ###
data %>%
group_by(pid, feature) %>%
summarise(mean = filler(values))
### Defining function ###
filler <- function(values) {
### Any will return false if all of the values are NA
### If at least one of them is not NA it wil return true
if (any(!is.na(values))) {
return(mean(values))
} else {
return(NA)
}
}
### We summerize the data with our new function ###
data %>%
group_by(pid, feature) %>%
summarise(mean = filler(values))
2074/34
vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv",
col_types = c(col_double())) %>% filter(pid %in% 1:100) %>% distinct(pid)
### We summerize the data with our new function ###
imp_data <- data %>%
group_by(pid, feature) %>%
summarise(mean = filler(values))
### Fill NA entries with variable median
medains
imp_data
?if_else
medians %>% slice(feature = "ABPd")
medains %>% slice(feature = "ABPd")
medains %>% slice(feature = "ABPd")
toy_featrue = "ABPd"
medains %>% filter(feature = ABPd)
medains %>% filter(feature = toy_featrue)
medains %>% filter(feature == toy_featrue)
medains %>% filter(feature == toy_featrue) %>% pull
medains %>% filter(feature == toy_featrue) %>% pull(median)
### Fill NA entries with variable median
imp_data %>% mutate(corrected_mean = if_else(is.na(mean),
medains %>% filter(feature == toy_featrue) %>% pull(median),
mean,
missing = NULL))
### Fill NA entries with variable median
imp_data %>% mutate(corrected_mean = if_else(is.na(mean),
medains %>% filter(feature == feature) %>% pull(median),
mean,
missing = NULL))
medains
imp_data
?pivot_wider
data %>%
select(-mean)
data
### Load data ###
data <- vroom::vroom(file = "/Users/santiago/ETH/2021_S/IML/IML_projects/task_2/task2_k49am2lqi/train_features.csv",
col_types = c(col_double()))
### Make data samller to test idea ###
data <- data %>% filter(pid %in% 1:100)
### Make data into long format ###
data <- data %>% pivot_longer(cols = -c("pid", "Time", "Age"),
names_to = "feature",
values_to = "values")
### Get medians ###
medians <- data %>%
filter(!is.na(values)) %>%
group_by(feature) %>%
summarise(median = median(values))
### Defining function ###
filler <- function(values) {
### Any will return false if all of the values are NA
### If at least one of them is not NA it wil return true
if (any(!is.na(values))) {
return(mean(values))
} else {
return(NA)
}
}
### We summerize the data with our new function ###
data <- data %>%
group_by(pid, feature) %>%
summarise(mean = filler(values))
### Fill NA entries with variable median ###
data <- data %>%
mutate(corrected_mean = if_else(is.na(mean),
medians %>% filter(feature == feature) %>% pull(median),
mean,
missing = NULL))
data
data %>%
select(-mean)
### Make data into n x m format ###
data %>%
select(-mean) %>%
pivot_wider(names_from = feature,
values_from = corrected_mean)
?vroom_write
data
### Make data into n x m format ###
data <- data %>%
select(-mean) %>%
pivot_wider(names_from = feature,
values_from = corrected_mean)
data
source('~/.active-rstudio-document')
data
?mean
source('~/.active-rstudio-document')
data
source('~/ETH/2021_S/IML/IML_projects/task_2/code/imputation_unnorm.R')
### Write data to output ###
vroom_write(data, path = "train_features_imp_unnorm.csv", delim = ",")
source('~/ETH/2021_S/IML/IML_projects/task_2/code/imputation_unnorm.R')
